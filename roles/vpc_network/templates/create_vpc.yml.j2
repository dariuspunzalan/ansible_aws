AWSTemplateFormatVersion: 2010-09-09
Description: VPC created from template - "{{ stack_name|default('LabStack') }}"

Parameters:
  VpcCidr:
    # AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-4]))$
    AllowedPattern: "^((\\d{1,3})\\.){3}0/\\d{1,2}"
    Default: 10.0.0.0/16
    Description: CIDR block for VPC.
    Type: String
  AvailabilityZoneCount:
    ConstraintDescription: "The number of availability zones. (Min: 1, Max: 3)"
    MinValue: 1
    MaxValue: 3
    Default: 1
    Description: "How many AZs to create VPC subnets for. (Min: 1, Max: 3)"
    Type: Number
  SubnetBits:
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/19-27.
    MinValue: 5
    MaxValue: 13
    Default: 12
    Description: "Size of each subnet to create within the availability zones. (Min: 5 = /27, Max: 13 = /19)"
    Type: Number

# vpccidr:
#   cidrblock: 10.10.0.0/16
#   privatesubnets:
#     - name: lab
#       cidr: 10.10.1.0/24
#       subnetbits: 5
#     - name: api
#       cidr: 10.10.1.0/24
#       subnetbits: 6
#   publicsubnets:
#     - name: frontend
#       cidr: 10.10.10.0/24
#       subnetbits: 6

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: "{{ vpccidr.cidrblock }}"
      Tags:
        - Key: Name
          Value: "{{ stackname|default('LabStack') }}"
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
#  PrivateRoute:
#    Type: "AWS::EC2::Route"
#    Properties:
#      RouteTableId:
#        Ref: PrivateRouteTable
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId:
#        Ref: NAT
#  EIP:
#    Type: "AWS::EC2::EIP"
#    Properties:
#      Domain: VPC

# create private subnet per AZs
{% for subnet_dict in vpccidr.privatesubnets|default({}) %}
{% for AZ in range(0, azcount|default(3)) %}
  privatesubnet{{ subnet_dict.name }}{{ AZ + 1}}:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [{{ AZ }}, !Cidr [{{ subnet_dict.cidr }}, 6, {{ subnet_dict.subnetbits }}]]
      AvailabilityZone: !Select
        - {{ AZ }}
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: privatesubnet{{ subnet_dict.name }}{{ AZ + 1}}
  PrivateSubnetRouteTableAssociation{{ AZ + 1}}:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref privatesubnet{{ subnet_dict.name }}{{ AZ + 1}}
      RouteTableId: !Ref PrivateRouteTable

{% endfor %}
{% endfor %}
# create public subnet per AZs
{% for subnet_dict in vpccidr.publicsubnets|default({}) %}
{% for AZ in range(0, azcount|default(3)) %}
  publicsubnet{{ subnet_dict.name }}{{ AZ + 1}}:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [{{ AZ }}, !Cidr [{{ subnet_dict.cidr }}, 6, {{ subnet_dict.subnetbits }}]]
      AvailabilityZone: !Select
        - {{ AZ }}
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: publicsubnet{{ subnet_dict.name }}{{ AZ + 1}}
  PublicSubnetRouteTableAssociation{{ AZ + 1}}:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref publicsubnet{{ subnet_dict.name }}{{ AZ + 1}}
      RouteTableId: !Ref PublicRouteTable
#  EIP{{ AZ + 1}}:
#    Type: "AWS::EC2::EIP"
#    Properties:
#      Domain: vpc
#  NAT:
#    DependsOn:
#    - GatewayToInternet
#    Type: "AWS::EC2::NatGateway"
#    Properties:
#      AllocationId:
#        "Fn::GetAtt":
#        - EIP{{ AZ + 1}}
#        - AllocationId
#      SubnetId: !Ref publicsubnet{{ subnet_dict.name }}{{ AZ + 1}}
{% endfor %}
{% endfor %}
